.model large
.stack 1000h

.data 
password db 'Zaim$'               ; Correct password
input_pass db 5 dup(?)            ; Buffer for 4 characters + '$'
newline db 13,10,'$'
enter_pass db 13,10,'Enter Password: $'  ; <-- FIXED LINE
wrong_pass db 13,10,'Incorrect Password! Access Denied.$'

;MAIN
start_msg db 10,13,'Select an option:',10,13,'1. Check Menu',10,13,'2. Check Stock',10,13,'3. Update Price$'
update_price_msg db 10,13,'Price update feature coming soon!$'


; Main and prompt messages
m1  db 10,13,'            XXXXXXWelcome to our store!XXXXXX$',10,13
m2  db 10,13,'Enter your Choice (1-5): $'

m3  db 10,13,'  ** 1. Drinks Menu             **$'
m4  db 10,13,'  ** 2. Chips Menu              **$'
m5  db 10,13,'  ** 3. Bakery Menu             **$'
m6  db 10,13,'  ** 4. Dairy Items             **$'
m7  db 10,13,'  ** 5. Frozen Food Menu        **$'

m8  db 10,13,'  ** Choose your food from the menu **$'

; Drinks
m9  db 10,13,'  ** 1. Mountain Dew      TK.30 **$'
m10 db 10,13,'  ** 2. Chocolate Milk    TK.40 **$'
m11 db 10,13,'  ** 3. Pepsi             TK.30 **$'
m12 db 10,13,'  ** 4. Frutika           TK.15 **$'
m13 db 10,13,'  ** 5. Coffee            TK.50 **$'
m14 db 10,13,'  ** 6. Orange Juice      TK.60 **$'

; Chips
m15 db 10,13,'  ** 1. LAYS              TK.50 **$'
m16 db 10,13,'  ** 2. Doritos           TK.40 **$'
m17 db 10,13,'  ** 3. Kurkure           TK.30 **$'
m18 db 10,13,'  ** 4. Pringles          TK.315**$'
m19 db 10,13,'  ** 5. Potato Crackers   TK.25 **$'
m20 db 10,13,'  ** 6. Tortilla Chips    TK.45 **$'

; Bakery
m21 db 10,13,'  ** 1. Chocolate Cake    TK.150**$'
m22 db 10,13,'  ** 2. Croissant         TK.40 **$'
m23 db 10,13,'  ** 3. Dry Cake          TK.100**$'
m24 db 10,13,'  ** 4. Bread             TK.55 **$'
m25 db 10,13,'  ** 5. Pastry            TK.70 **$'
m26 db 10,13,'  ** 6. Biscuit           TK.30 **$'

; Dairy
m27 db 10,13,'  ** 1. Milk              TK.50 **$'
m28 db 10,13,'  ** 2. Yogurt            TK.40 **$'
m29 db 10,13,'  ** 3. Butter            TK.80 **$'
m30 db 10,13,'  ** 4. Cheese            TK.120**$'
m31 db 10,13,'  ** 5. Curd              TK.35 **$'
m32 db 10,13,'  ** 6. Flavored Milk     TK.55 **$'

; Frozen
m33 db 10,13,'  ** 1. Ice-Cream         TK.100**$'
m34 db 10,13,'  ** 2. Frozen Pizza      TK.200**$'
m35 db 10,13,'  ** 3. French Fries      TK.60 **$'
m36 db 10,13,'  ** 4. Frozen Samosa     TK.80 **$'
m37 db 10,13,'  ** 5. Frozen Nuggets    TK.150**$'
m38 db 10,13,'  ** 6. Frozen Paratha    TK.90 **$'

invalidMsg db 10,13,'*** Invalid Entry! Please try again ***$',13,10,'$'

M57 DB 10,13,10,13,'Enter your order: $'
M58 DB 10,13,'Quantity: $'
M59 DB 10,13,'Total Price: $'

DRINK DB ?
QUANTITY DB ?

M60 DB 10,13,10,13,'1.Go Back to Main Menu$'
M61 DB 10,13,'2.EXIT$'  

;for stock 

; --- Stock Arrays for each category ---
drinks_stock db 5, 5, 5, 5, 5, 5
chips_stock  db 5, 5, 5, 5, 5, 5
bakery_stock db 5, 5, 5, 5, 5, 5
dairy_stock  db 5, 5, 5, 5, 5, 5
frozen_stock db 5, 5, 5, 5, 5, 5

stock_msg db 13,10,'Current Stock Levels:',13,10,'$'
low_stock_msg db ' - LOW STOCK!$', 13,10

;for tracking stock
CATEGORY DB ?      ; 1=Drinks, 2=Chips, ..., 5=Frozen




.code
main:
    mov ax, @data
    mov ds, ax

; ---- PASSWORD SECTION ----
    password_check:
    lea dx, enter_pass
    call print_str

    lea si, input_pass
    mov cx, 4
read_loop:
    call read_char
    mov [si], al
    inc si
    loop read_loop
    mov byte ptr [si], '$'

    lea si, input_pass
    lea di, password
compare_loop:
    mov al, [si]
    cmp al, [di]
    jne wrong
    cmp al, '$'
    je correct
    inc si
    inc di
    jmp compare_loop

wrong:
    lea dx, wrong_pass
    call print_str
    jmp password_check

correct:
    jmp start_menu
        
        
;startmenu
start_menu:
    lea dx, start_msg
    call print_str

    mov ah, 1
    int 21h
    sub al, '0'
    cmp al, 1
    je main_menu      ; your existing menu logic
    cmp al, 2
    je view_stock     ; your stock view logic
    cmp al, 3
    je update_price
    jmp start_menu
                  
                  
update_price:
    lea dx, update_price_msg
    call print_str
    jmp start_menu                  
                  
view_stock:
    lea dx, stock_msg
    call print_str

    ; ------- Drinks -------
    lea si, drinks_stock
    lea dx, m9
    call print_str
    call show_qty
    lea dx, m10
    call print_str
    inc si
    call show_qty
    lea dx, m11
    call print_str
    inc si
    call show_qty
    lea dx, m12
    call print_str
    inc si
    call show_qty
    lea dx, m13
    call print_str
    inc si
    call show_qty
    lea dx, m14
    call print_str
    inc si
    call show_qty

    ; ------- Chips -------
    lea si, chips_stock
    lea dx, m15
    call print_str
    call show_qty
    lea dx, m16
    call print_str
    inc si
    call show_qty
    lea dx, m17
    call print_str
    inc si
    call show_qty
    lea dx, m18
    call print_str
    inc si
    call show_qty
    lea dx, m19
    call print_str
    inc si
    call show_qty
    lea dx, m20
    call print_str
    inc si
    call show_qty

    ; ------- Bakery -------
    lea si, bakery_stock
    lea dx, m21
    call print_str
    call show_qty
    lea dx, m22
    call print_str
    inc si
    call show_qty
    lea dx, m23
    call print_str
    inc si
    call show_qty
    lea dx, m24
    call print_str
    inc si
    call show_qty
    lea dx, m25
    call print_str
    inc si
    call show_qty
    lea dx, m26
    call print_str
    inc si
    call show_qty

    ; ------- Dairy -------
    lea si, dairy_stock
    lea dx, m27
    call print_str
    call show_qty
    lea dx, m28
    call print_str
    inc si
    call show_qty
    lea dx, m29
    call print_str
    inc si
    call show_qty
    lea dx, m30
    call print_str
    inc si
    call show_qty
    lea dx, m31
    call print_str
    inc si
    call show_qty
    lea dx, m32
    call print_str
    inc si
    call show_qty

    ; ------- Frozen -------
    lea si, frozen_stock
    lea dx, m33
    call print_str
    call show_qty
    lea dx, m34
    call print_str
    inc si
    call show_qty
    lea dx, m35
    call print_str
    inc si
    call show_qty
    lea dx, m36
    call print_str
    inc si
    call show_qty
    lea dx, m37
    call print_str
    inc si
    call show_qty
    lea dx, m38
    call print_str
    inc si
    call show_qty

    ; Go back to menu
    jmp start_menu
     

main_menu:
    lea dx, m1
    mov ah, 9
    int 21h

    lea dx, m3
    mov ah, 9
    int 21h

    lea dx, m4
    mov ah, 9
    int 21h

    lea dx, m5
    mov ah, 9
    int 21h

    lea dx, m6
    mov ah, 9
    int 21h

    lea dx, m7
    mov ah, 9
    int 21h

    lea dx, m2
    mov ah, 9
    int 21h

    mov ah, 1
    int 21h
    sub al, '0'
    mov bl, al

    cmp bl, 1
    je drinks
    cmp bl, 2
    je chips
    cmp bl, 3
    je bakery
    cmp bl, 4
    je dairy
    cmp bl, 5
    je frozen
    
    cmp bl, 6
    je view_stock

    lea dx, invalidMsg
    mov ah, 9
    int 21h
    jmp main_menu 
    

;========================= Drinks ===========================
drinks:
    lea dx, m8
    mov ah, 9
    int 21h

    lea dx, m9
    mov ah, 9
    int 21h
    lea dx, m10
    mov ah, 9
    int 21h
    lea dx, m11
    mov ah, 9
    int 21h
    lea dx, m12
    mov ah, 9
    int 21h
    lea dx, m13
    mov ah, 9
    int 21h
    lea dx, m14
    mov ah, 9
    int 21h  
    
    mov CATEGORY, 1
    jmp order_input

;========================= Chips ===========================
chips:
    lea dx, m8
    mov ah, 9
    int 21h

    lea dx, m15
    mov ah, 9
    int 21h
    lea dx, m16
    mov ah, 9
    int 21h
    lea dx, m17
    mov ah, 9
    int 21h
    lea dx, m18
    mov ah, 9
    int 21h
    lea dx, m19
    mov ah, 9
    int 21h
    lea dx, m20
    mov ah, 9
    int 21h 
    
    mov CATEGORY,2
    jmp order_input

;========================= Bakery ===========================
bakery:
    lea dx, m8
    mov ah, 9
    int 21h

    lea dx, m21
    mov ah, 9
    int 21h
    lea dx, m22
    mov ah, 9
    int 21h
    lea dx, m23
    mov ah, 9
    int 21h
    lea dx, m24
    mov ah, 9
    int 21h
    lea dx, m25
    mov ah, 9
    int 21h
    lea dx, m26
    mov ah, 9
    int 21h 
    
    mov CATEGORY,3
    jmp order_input

;========================= Dairy ===========================
dairy:
    lea dx, m8
    mov ah, 9
    int 21h

    lea dx, m27
    mov ah, 9
    int 21h
    lea dx, m28
    mov ah, 9
    int 21h
    lea dx, m29
    mov ah, 9
    int 21h
    lea dx, m30
    mov ah, 9
    int 21h
    lea dx, m31
    mov ah, 9
    int 21h
    lea dx, m32
    mov ah, 9
    int 21h   
    
    mov CATEGORY,4
    jmp order_input

;========================= Frozen ===========================
frozen:
    lea dx, m8
    mov ah, 9
    int 21h

    lea dx, m33
    mov ah, 9
    int 21h
    lea dx, m34
    mov ah, 9
    int 21h
    lea dx, m35
    mov ah, 9
    int 21h
    lea dx, m36
    mov ah, 9
    int 21h
    lea dx, m37
    mov ah, 9
    int 21h
    lea dx, m38
    mov ah, 9
    int 21h  
    
    mov CATEGORY,5
    jmp order_input

;========================= Order Input ===========================
order_input:
    lea dx, newline
    mov ah, 9
    int 21h

    lea dx, M57
    mov ah, 9
    int 21h

    mov ah, 1
    int 21h
    sub al, '0'
    mov DRINK, al

    lea dx, M58
    mov ah, 9
    int 21h

    mov ah, 1
    int 21h
    sub al, '0'
    mov QUANTITY, al

    lea dx, M60
    mov ah, 9
    int 21h

    lea dx, M61
    mov ah, 9
    int 21h

    mov ah, 1
    int 21h
    cmp al, '1'
    je main_menu
    cmp al, '2'
    je exit_program
    jmp main_menu  
                  
                  
;LOW STOCK WARNING
; --- Calculate stock offset ---
    mov bl, DRINK       ; item number
    dec bl              ; 0-based index

    mov bh, 0
    mov si, 0           ; SI = offset to correct category

    mov al, CATEGORY
    cmp al, 1
    je is_drinks
    cmp al, 2
    je is_chips
    cmp al, 3
    je is_bakery
    cmp al, 4
    je is_dairy
    cmp al, 5
    je is_frozen
    jmp skip_stock_check

is_drinks:
    lea si, drinks_stock
    jmp reduce_stock
is_chips:
    lea si, chips_stock
    jmp reduce_stock
is_bakery:
    lea si, bakery_stock
    jmp reduce_stock
is_dairy:
    lea si, dairy_stock
    jmp reduce_stock
is_frozen:
    lea si, frozen_stock
    jmp reduce_stock

reduce_stock:
    add si, bx                 ; point to the correct item
    mov al, [si]               ; current stock
    sub al, QUANTITY           ; reduce by order amount
    mov [si], al               ; update stock

    cmp al, 2
    jne skip_stock_check

    lea dx, low_stock_msg
    call print_str

skip_stock_check:

    
    




;========================= Exit ===========================
exit_program:
    mov ah, 4Ch
    int 21h


;========================= Helper Procedures ===========================
print_str proc
    mov ah, 9
    int 21h
    ret
print_str endp

read_char proc
    mov ah, 1
    int 21h
    ret
read_char endp    


show_qty proc
    mov ah, 2
    mov dl, 9
    int 21h        ; tab

    mov al, [si]
    add al, '0'    ; convert to ASCII
    mov dl, al
    mov ah, 2
    int 21h

    cmp al, '2'    ; if <= 2 then LOW STOCK
    ja skip_low
    lea dx, low_stock_msg
    call print_str

skip_low:
    lea dx, newline
    call print_str
    ret
show_qty endp


end main
